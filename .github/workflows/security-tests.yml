name: Security & Architecture Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-tests:
    name: Security Test Suite
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock

    - name: Run Security Tests
      run: |
        pytest tests/security/ -v -m security --tb=short --junit-xml=security-results.xml
      continue-on-error: false

    - name: Upload Security Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-test-results
        path: security-results.xml

  architecture-tests:
    name: Architecture Guardrail Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest ripgrep

    - name: Run Architecture Tests
      run: |
        pytest tests/architecture/ -v --tb=short --junit-xml=architecture-results.xml
      continue-on-error: false

    - name: Upload Architecture Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: architecture-test-results
        path: architecture-results.xml

  integration-tests:
    name: Integration Test Suite
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock

    - name: Run Integration Tests
      run: |
        pytest tests/integrations/ -v -m integration --tb=short --junit-xml=integration-results.xml
      continue-on-error: true  # Don't fail build on integration test failures

    - name: Upload Integration Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: integration-results.xml

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [security-tests, architecture-tests, integration-tests]
    if: always()

    steps:
    - name: Check Security Tests
      if: needs.security-tests.result == 'failure'
      run: |
        echo "::error::Security tests failed - blocking merge"
        exit 1

    - name: Check Architecture Tests
      if: needs.architecture-tests.result == 'failure'
      run: |
        echo "::error::Architecture tests failed - blocking merge"
        exit 1

    - name: Check Integration Tests
      if: needs.integration-tests.result == 'failure'
      run: |
        echo "::warning::Integration tests failed - review before merging"

    - name: All Tests Passed
      if: needs.security-tests.result == 'success' && needs.architecture-tests.result == 'success'
      run: |
        echo "âœ… All critical tests passed!"
