/**
 * TypeScript API Types for Lolla Frontend 2.0
 * ============================================
 *
 * Generated from src/core/pipeline_contracts.py
 * These types ensure type safety between frontend and backend
 */

// ========================================
// Core Analysis Types
// ========================================

export interface AnalysisRequest {
  query: string;
  context?: Record<string, any>;
  quality_target?: number; // 0.60-0.95
  uploaded_documents?: string[]; // Document IDs
  interactive_mode?: boolean; // If true, pause after generating questions for user answers
}

export interface AnalysisResponse {
  trace_id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  created_at: string;
  estimated_duration_minutes: number;
}

export interface AnalysisStatus {
  trace_id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  current_stage: string;
  progress_percentage: number;
  stages_completed: number;
  total_stages: number;
  updated_at: string;
  error_message?: string;
  processing_mode?: 'light' | 'standard' | 'full';
}

export interface StrategicQuestion {
  id: string;
  question: string;
  category: string;
  priority: number;
  tier: string;
  tosca_tag?: string;
  auto_generated?: boolean;
}

export interface SocraticOutput {
  key_strategic_questions: StrategicQuestion[];
  clarified_problem_statement: string;
  key_business_insights: string[];
  tosca_coverage: Record<string, string[]>;
  missing_tosca_elements: string[];
  autogenerated_question_ids: string[];
  trace_id: string;
  quality_score: number;
  processing_time_ms: number;
}

export interface MECEComponent {
  dimension: string;
  key_considerations: string[];
  priority_level: number;
}

export interface ProblemStructuringOutput {
  mece_framework: MECEComponent[];
  core_assumptions: string[];
  critical_constraints: string[];
  success_criteria: string[];
  trace_id: string;
  quality_assessment: 'excellent' | 'good' | 'adequate' | 'poor';
  processing_time_ms: number;
  autopad_used: boolean;
  autopadded_components: string[];
}

export interface OracleCitation {
  source_url?: string;
  source_title?: string;
  excerpt?: string;
  relevance_score?: number;
  timestamp?: string;
  doc_id?: string;
  uri?: string;
  source?: string;
  metadata?: Record<string, any>;
}

export interface EnhancementMetadata {
  priority_targets?: {
    critical?: string[];
    important?: string[];
    useful?: string[];
  };
  prioritized_questions?: Array<{
    question?: string;
    question_text?: string;
    information_target?: string;
    information_value?: string;
  }>;
  minority_signal_count?: number;
  minority_signals?: string[];
  framing_invariance_tested?: boolean;
}

export interface BriefingMemo {
  summary?: string;
  structured_data?: Record<string, any>;
  key_findings: string[];
  citations: OracleCitation[];
  web_findings: string[];
  internal_context: string[];
  market_context?: string;
  risks_identified: string[];
  opportunities_identified: string[];
  gpa_scores: Record<string, number>;
  quality_indicator: 'GREEN' | 'YELLOW' | 'RED' | 'UNKNOWN';
  warnings: string[];
  research_confidence?: number;
  research_depth?: string;
  provider?: string;
  provider_model?: string;
  recency_metrics?: Record<string, number>;
  query_audit?: Record<string, any>[];
  trace_id: string;
  processing_time_ms?: number;
  status: 'COMPLETE' | 'PARTIAL' | 'FAILED';
}

export interface StrategicGoal {
  id: string;
  description: string;
  priority: 1 | 2 | 3;
  status: 'active' | 'completed' | 'blocked';
  assigned_stage?: string;
}

export interface PipelineStage {
  stage_name: string;
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  started_at?: string;
  completed_at?: string;
  duration_ms?: number;
  output?: any;
}

// ========================================
// Report Types
// ========================================

export interface FinalReport {
  trace_id: string;
  query: string;
  executive_summary: string;
  strategic_recommendations: StrategicRecommendation[];
  key_decisions: KeyDecision[];
  quality_metrics: QualityMetrics;
  consultant_analyses: ConsultantAnalysis[];
  devils_advocate_transcript: string;
  evidence_trail: Evidence[];
  metadata: ReportMetadata;
  created_at: string;
  briefing_memo?: BriefingMemo;
  socratic_results?: SocraticOutput;
  structuring_results?: ProblemStructuringOutput;
  processing_mode?: 'light' | 'standard' | 'full';
  enhancement_metadata?: EnhancementMetadata;
  active_goals?: StrategicGoal[];
}

export interface StrategicRecommendation {
  priority: 'critical' | 'high' | 'medium' | 'low';
  recommendation: string;
  rationale: string;
  implementation_guidance: string;
  expected_impact: string;
  risks: string[];
  dependencies: string[];
}

export interface KeyDecision {
  decision: string;
  supporting_evidence: string[];
  confidence_level: number;
  assumptions: string[];
  alternative_considered: string;
}

export interface QualityMetrics {
  overall_quality: number;
  cognitive_diversity_index: number; // Orthogonality
  evidence_strength: number;
  recommendation_clarity: number;
  execution_time_ms: number;
  consultant_count: number;
  mental_models_applied: number;
  nway_relations_activated: number;
}

export interface ConsultantAnalysis {
  consultant_name: string;
  consultant_type: string; // 'strategic', 'operational', 'financial', 'innovation'
  perspective: string;
  key_insights: string[];
  recommendations: string[];
  concerns: string[];
  confidence_score?: number;
  confidence_level?: 'high' | 'medium' | 'low';
  analysis_quality?: 'excellent' | 'good' | 'adequate' | 'poor';
  risk_factors?: string[];
  opportunities?: string[];
  consultant_id?: string;
}

export interface Evidence {
  source_type: 'user_document' | 'web_research' | 'knowledge_base';
  source_name: string;
  content_snippet: string;
  page_number?: number;
  credibility_score: number;
  relevance_score: number;
  url?: string;
}

export interface ReportMetadata {
  generation_method: string;
  llm_providers_used: string[];
  total_tokens: number;
  cost_usd: number;
  cache_hits: number;
}

// ========================================
// Progressive Questions Types
// ========================================

export interface ProgressiveQuestionsRequest {
  query: string;
  trace_id: string;
}

export interface ProgressiveQuestionsResponse {
  session_id: string;
  trace_id: string;
  questions: TieredQuestion[];
  skip_available: boolean;
  estimated_time_minutes: number;
}

export interface TieredQuestion {
  id: string;
  tier: 1 | 2 | 3; // Essential | Strategic | Expert
  question: string;
  dimension: string; // 'scope', 'constraints', 'objectives', 'stakeholders', 'risks'
  context_hint?: string;
  required: boolean;
  placeholder?: string;
}

export interface ProgressiveQuestionsSubmission {
  session_id: string;
  answers: QuestionAnswer[];
  skip_tiers?: number[]; // Tiers to skip (2, 3)
}

export interface QuestionAnswer {
  question_id: string;
  response: string;
  confidence: number; // 0-1
}

// ========================================
// Ideaflow Types
// ========================================

export interface IdeaflowRequest {
  problem_statement: string;
  context?: Record<string, any>;
  max_ideas_per_stream?: number; // Default: 10
  cluster_count?: number; // Default: 5
}

export interface IdeaflowResponse {
  sprint_id: string;
  status: 'running' | 'completed' | 'failed';
  message: string;
  estimated_duration_minutes: number;
}

export interface IdeaflowStatus {
  sprint_id: string;
  status: 'running' | 'completed' | 'failed';
  current_step: string; // 'divergent_generation' | 'convergent_filtering' | 'experimental_design'
  progress_percentage: number;
  started_at: string;
  error_message?: string;
}

export interface IdeaflowResult {
  sprint_id: string;
  problem_statement: string;
  generated_ideas_count: number;
  clusters: IdeaCluster[];
  metadata: Record<string, any>;
  completed_at: string;
}

export interface IdeaCluster {
  theme: string;
  description: string;
  selected_idea: string;
  all_ideas: string[];
  experiment: MVSExperiment;
}

export interface MVSExperiment {
  hypothesis: string;
  test_design: string;
  success_criteria: string[];
  duration: string;
  budget_estimate: string;
  risks: string[];
}

// ========================================
// Copywriter Types
// ========================================

export interface CopywriterRequest {
  trace_id: string; // Source analysis
  target_word_count?: number; // 600-3000, default: 1200
  persuasion_intensity?: number; // 0.3-1.0, default: 0.7
  technical_depth?: number; // 0.1-0.9, default: 0.5
  audience_sophistication?: number; // 0.2-0.9, default: 0.6
}

export interface CopywriterResponse {
  job_id: string;
  trace_id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  message: string;
  estimated_duration_minutes: number;
}

export interface CopywriterStatus {
  job_id: string;
  trace_id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  current_stage?: string; // 'distillation' | 'architecture' | 'drafting' | 'editing' | 'red_team'
  completed_stages: string[];
  progress_percentage: number;
  error_message?: string;
  created_at: string;
}

export interface CopywriterResult {
  job_id: string;
  trace_id: string;
  governing_thought: string; // 12-word core message
  narrative_structure: NarrativeStructure;
  polished_content: string;
  anticipated_objections: Objection[];
  defensive_strategies: DefensiveStrategy[];
  skim_test_score: number;
  clarity_score: number;
  persuasion_score: number;
  defensibility_score: number;
  word_count: number;
  completed_at: string;
}

export interface NarrativeStructure {
  hook: string;
  problem_setup: string;
  solution_reveal: string;
  evidence_cascade: string[];
  call_to_action: string;
}

export interface Objection {
  objection_type: string;
  statement: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
}

export interface DefensiveStrategy {
  objection_id: string;
  response_approach: string;
  counter_evidence: string[];
  reframing: string;
}

// ========================================
// Pitch Generator Types
// ========================================

export interface PitchRequest {
  strategic_content: string; // Source analysis or content
  audience_context?: Record<string, any>;
  constraints?: Record<string, any>; // Time, format, delivery constraints
}

export interface PitchResponse {
  pitch_id: string;
  status: 'running' | 'completed' | 'failed';
  message: string;
  estimated_duration_minutes: number;
}

export interface PitchStatus {
  pitch_id: string;
  status: 'running' | 'completed' | 'failed';
  current_phase: string; // 'foundation_development' | 'stress_testing' | 'visual_design' | 'integration'
  progress_percentage: number;
  started_at: string;
  error_message?: string;
}

export interface PitchResult {
  pitch_id: string;
  strategic_content: string;
  pitch_deck: PitchDeck;
  speaker_notes: Record<string, any>;
  metadata: Record<string, any>;
  completed_at: string;
}

export interface PitchDeck {
  title: string;
  executive_summary: string;
  narrative_structure: Record<string, any>;
  evidence_architecture: Record<string, any>;
  objection_playbook: Record<string, any>;
  visual_guidelines: Record<string, any>;
  slides: PitchSlide[];
}

export interface PitchSlide {
  slide_number: number;
  slide_type: string; // 'title', 'problem', 'solution', 'evidence', 'call_to_action'
  headline: string;
  key_points: string[];
  visual_recommendation: string;
  speaker_notes: string;
}

// ========================================
// Document Upload Types
// ========================================

export interface DocumentUploadRequest {
  file: File;
  trace_id: string;
  analysis_id?: string;
}

export interface DocumentUploadResponse {
  document_id: string;
  filename: string;
  content_type: string;
  size: number;
  text_content_length: number;
  chunk_count: number;
  metadata: Record<string, any>;
  processing_status: 'completed' | 'failed';
  uploaded_at: string;
}

// ========================================
// WebSocket Event Types
// ========================================

export interface WebSocketEvent {
  type: 'stage_progress' | 'stage_completed' | 'pipeline_completed' | 'error';
  trace_id: string;
  timestamp: string;
  data: any;
}

export interface StageProgressEvent {
  stage_name: string;
  progress_percentage: number;
  current_operation: string;
}

export interface StageCompletedEvent {
  stage_name: string;
  duration_ms: number;
  output_summary: string;
}

export interface PipelineCompletedEvent {
  trace_id: string;
  total_duration_ms: number;
  quality_score: number;
}

// ========================================
// Mental Models / Academy Types
// ========================================

export interface MentalModel {
  id: string;
  name: string;
  category: string;
  description: string;
  source: string; // Academic, BCG, McKinsey, etc.
  key_concepts: string[];
  applications: string[];
  related_models: string[];
}

export interface NWayRelation {
  id: string;
  name: string;
  mental_models: string[]; // List of model IDs (typically 5)
  interaction_strength: number; // 0-1
  use_cases: string[];
  description: string;
}
