"use client";

import React, { useMemo, useState } from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { RawJson } from './RawJson'
import { useGlassBoxStore } from '@/lib/state/glassBox'

export function SeniorAdvisorView({ data }: { data: any }) {
  const { glassBox } = useGlassBoxStore()
  const senior = data?.senior_advisor || data?.report?.senior_advisor
  const [showRaw, setShowRaw] = useState(false)

  if (glassBox) {
    return <RawJson title="Senior Advisor (Raw)" data={senior ?? {}} />
  }

  const markdown: string | undefined =
    (typeof senior?.synthesis_markdown === 'string' && senior.synthesis_markdown) ||
    undefined

  const recs: any[] = useMemo(() => {
    if (Array.isArray(senior?.strategic_recommendations)) return senior.strategic_recommendations
    if (Array.isArray(data?.strategic_recommendations)) return data.strategic_recommendations
    if (Array.isArray(data?.report?.strategic_recommendations)) return data.report.strategic_recommendations
    return []
  }, [senior, data])

  const traceId: string | undefined = typeof data?.trace_id === 'string' ? data.trace_id : undefined
  const htmlReportUrl = typeof data?.final_report_url === 'string' ? data.final_report_url : (traceId ? `/api/engagements/${traceId}/report` : undefined)
  const jsonBundleUrl = traceId ? `/api/v2/engagements/${traceId}/bundle` : undefined

  // Avoid duplicating the header summary: if SA text equals the top-level summary, hide it here
  const isDuplicate = typeof markdown === 'string' && typeof data?.executive_summary === 'string' && markdown.trim() === data.executive_summary.trim()

  return (
    <section className="bg-white rounded-2xl border border-border-default p-6 shadow-sm">
      <div className="mb-4 flex items-start justify-between gap-3">
        <div>
          <h3 className="text-lg font-semibold">Senior Advisor Synthesis</h3>
          <div className="text-xs text-text-label">Generated by: Senior Strategy Advisor</div>
        </div>
        <div className="flex items-center gap-2">
          <button type="button" className="text-xs underline text-text-label" onClick={()=>setShowRaw((s)=>!s)}>
            {showRaw ? 'Hide raw' : 'Show raw'}
          </button>
          {htmlReportUrl && (
            <a href={htmlReportUrl} target="_blank" rel="noreferrer" className="text-xs underline text-warm-black">Open HTML</a>
          )}
          {jsonBundleUrl && (
            <a href={jsonBundleUrl} target="_blank" rel="noreferrer" className="text-xs underline text-text-label">Open JSON</a>
          )}
        </div>
      </div>

      {showRaw && (
        <div className="mt-4">
          <RawJson title="Senior Advisor (Raw)" data={senior ?? {}} />
        </div>
      )}

      {typeof markdown === 'string' && !isDuplicate && (
        <article className="prose prose-sm max-w-none break-words whitespace-pre-wrap">
          <ReactMarkdown remarkPlugins={[remarkGfm]}>{markdown}</ReactMarkdown>
        </article>
      )}

      {recs.length > 0 && (
        <div className="mt-6">
          <h4 className="text-sm font-semibold mb-2">Strategic Recommendations</h4>
          <div className="space-y-3">
            {recs.map((r: any, idx: number) => {
              const title = typeof r === 'string' ? r : r?.recommendation || r?.title || `Move ${idx + 1}`
              const priority = (r?.priority || 'MEDIUM').toString().toUpperCase()
              const confidence = (typeof r?.confidence_level === 'number' ? r.confidence_level : (typeof r?.confidence === 'number' ? r.confidence : 0))
              const rationale = r?.rationale || r?.summary
              const guidance: string[] = Array.isArray(r?.implementation_guidance)
                ? r.implementation_guidance
                : (typeof r?.implementation_guidance === 'string' ? r.implementation_guidance.split('\n').filter(Boolean) : [])
              return (
                <div key={idx} className="rounded-xl border border-border-default bg-cream-bg/30 p-4">
                  <div className="flex items-start justify-between gap-3">
                    <h5 className="text-sm font-semibold text-warm-black">{title}</h5>
                    <span className={`text-xs px-2 py-0.5 rounded font-medium ${priority === 'HIGH' || priority === 'CRITICAL' ? 'bg-red-100 text-red-700' : priority === 'IMPORTANT' || priority === 'MEDIUM' ? 'bg-yellow-100 text-yellow-700' : 'bg-gray-100 text-gray-700'}`}>{priority}</span>
                  </div>
                  {rationale && (
                    <p className="mt-1 text-xs text-text-body whitespace-pre-wrap">{rationale}</p>
                  )}
                  {guidance.length > 0 && (
                    <ul className="mt-2 list-disc pl-5 text-xs text-text-body space-y-1">
                      {guidance.slice(0, 5).map((g, i) => (
                        <li key={i}>{g}</li>
                      ))}
                    </ul>
                  )}
                  {confidence > 0 && (
                    <div className="mt-2 text-[11px] text-text-label">Confidence: {Math.round(confidence * 100)}%</div>
                  )}
                </div>
              )}
            )}
          </div>
        </div>
      )}

      {!markdown && recs.length === 0 && (
        <p className="text-sm text-text-body">No senior advisor synthesis available.</p>
      )}
    </section>
  )
}
